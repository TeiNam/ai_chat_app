### 환경 변수 설정
@baseUrl = http://localhost:8000
@email = test@example.com
@password = TestPassword1!

### 로그인하여 토큰 가져오기
# @name login
POST {{baseUrl}}/api/auth/login
Content-Type: application/x-www-form-urlencoded

username={{email}}&password={{password}}

### 토큰 변수 저장 - REST Client 버전에 따른 여러 방법 제공
@authToken = eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxIiwiZW1haWwiOiJtZWRpYUByYXN0YWxpb24ubWUiLCJwd2RfY2hhbmdlX3JlcXVpcmVkIjpmYWxzZSwiZXhwIjoxNzQxNTcwODUxfQ.I6YdrLhoUtVY0JDuuuBGendA7PGgS7sEUBSxRcPmhm0
# 또는 다음 방법 중 하나 사용
# @authToken = {{login.response.body.access_token}}
# @authToken = {{login.response.body.$.access_token}}
# @authToken = {{login.response.body."access_token"}}

### 사용자 API 키 목록 조회
# @name apiKeys
GET {{baseUrl}}/api/user/api-keys
Authorization: Bearer {{authToken}}

### 첫 번째 API 키 ID 저장 (사용 가능한 API 키가 있는 경우)
@apiKeyId = {{apiKeys.response.body.$[0].api_key_id}}
# 또는 다음 방법도 가능
# @apiKeyId = {{apiKeys.response.body.[0].api_key_id}}

### 그룹 생성
# @name createGroup
POST {{baseUrl}}/api/groups
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Test Group",
  "api_key_id": 1
}

### 생성된 그룹 ID 저장
@groupId = {{createGroup.response.body.$.group_id}}
# 또는 다음 방법도 가능
# @groupId = {{createGroup.response.body.group_id}}

### 사용자 그룹 목록 조회
GET {{baseUrl}}/api/groups
Authorization: Bearer {{authToken}}

### 그룹 상세 정보 조회
GET {{baseUrl}}/api/groups/1
Authorization: Bearer {{authToken}}

### 그룹 정보 업데이트
PUT {{baseUrl}}/api/groups/{{groupId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "Updated Test Group"
}

### 그룹에 멤버 초대
POST {{baseUrl}}/api/groups/1/invite
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "email": "rastalion.data@gmail.com",
  "note": "Welcome to our test group!"
}

### 그룹에 멤버 직접 추가 (다른 사용자의 ID 필요)
POST {{baseUrl}}/api/groups/{{groupId}}/members
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "user_id": 2,
  "note": "Directly added member"
}

### 그룹 멤버 정보 업데이트 (멤버 ID 필요)
# @memberIdToUpdate = 123
PUT {{baseUrl}}/api/groups/{{groupId}}/members/{{memberIdToUpdate}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "is_active": true,
  "note": "Updated member note"
}

### 그룹에서 멤버 제거 (멤버 ID 필요)
# @memberIdToRemove = 123
DELETE {{baseUrl}}/api/groups/{{groupId}}/members/{{memberIdToRemove}}
Authorization: Bearer {{authToken}}

### 그룹 초대 수락 (초대 토큰 필요)
# @invitationToken = your_invitation_token_here
POST {{baseUrl}}/api/groups/accept-invitation
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "invitation_token": "{{invitationToken}}"
}

### 그룹 삭제
DELETE {{baseUrl}}/api/groups/{{groupId}}
Authorization: Bearer {{authToken}}